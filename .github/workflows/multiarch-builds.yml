name: MultiArchitecture Builds

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        type: string
        required: true

jobs:
  Create_Release:
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
    runs-on: ubuntu-24.04
    steps:
      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: Version ${{ github.event.inputs.version }}
          tag_name: ${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

  Build_Windows:
    needs: Create_Release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build for Windows
        shell: pwsh
        run: |
          python -m pip install -r requirements.txt
          pyinstaller --onefile .\main.py

      - name: Upload Windows Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{needs.Create_Release.outputs.release_url}}
          asset_path: ./dist/main.exe
          asset_name: pre_windows_amd64.exe
          asset_content_type: application/exe

  Build_Linux:
    needs: Create_Release
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Get Release URL
        id: get_url
        uses: noobly314/share-data@v1
        with:
          share-id: this_share_id
          mode: get
          key: upload_url
      - name: Use Value
        run: echo "${{ steps.get_url.outputs.data }}"
      - name: Build for Linux
        run: |
          python -m pip install -r requirements.txt
          pyinstaller --onefile ./main.py

      - name: Upload Linux Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{needs.Create_Release.outputs.release_url}}
          asset_path: ./dist/main
          asset_name: pre_linux_amd64
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Source Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{needs.Create_Release.outputs.release_url}}
          asset_path: main.py
          asset_name: pre.py
          asset_content_type: text/plain


permissions:
  contents: write
