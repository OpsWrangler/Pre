name: MultiArchitecture Builds

on:
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        type: string
        required: true

jobs:
  Create_Release:
    runs-on: ubuntu-24.04
    steps:
      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          # release_name: ${{ steps.version.outputs.version }}
          release_name: ${{ github.event.inputs.version }}
          tag_name: ${{ github.event.inputs.version }}
          # tag_name: ${{ github.ref }}
          # body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}


  Build_Windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build for Windows
        shell: pwsh
        run: |
          python -m pip install -r requirements.txt
          # Invoke-WebRequest https://github.com/upx/upx/releases/download/v4.2.4/upx-4.2.4-win64.zip -UseBasicParsing -OutFile upx.zip
          # Expand-Archive -LiteralPath upx.zip
          # Get-ChildItem -Recurse
          # cp .\upx\upx-4.2.4-win64\upx.exe .
          pyinstaller --onefile .\main.py
          mv ./dist/main.exe ./dist/pre_windows_amd64.exe
          # Get-ChildItem -Recurse

      - name: Upload Windows Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/pre_windows_amd64.exe
          asset_name: Windows (amd64)
          asset_content_type: application/exe

  Build_Linux:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Build for Linux
        run: |
          python -m pip install -r requirements.txt
          pyinstaller --onefile ./main.py
          mv ./dist/main ./dist/pre_linux_amd64
          ls -alhR

      - name: Upload Linux Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/pre_linux_amd64
          asset_name: Linux (amd64)
          asset_content_type: application/vnd.debian.binary-package






permissions:
  contents: write
